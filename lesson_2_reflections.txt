git commands:
git init 			initialize Git in working directory
git status 			view status of repository
git add <file>		add file to staging area
git diff 			compare working directory to staging area
git diff --staged	compare staging area to newest commit
git reset --hard	overwrite working directory with newest commit
git checkout master	checkout back to HEAD
git commit -m "text" commit with one-line-comment instead of sublime
git log --graph		show commits in form of a graph
git branch 			show branches
git branch <name>	create branch but not move into it
git checkout <name>	switch into branch
git checkout -b <name>	create and switch to new branch
git merge <b1> <b2>	merge branch b1 and b2 into the branch that is checked out
git show <commit>	show changes of commit against its parent (as git diff)
git branch -d <b2>	delete b2-label

git remote			show remote repositories
git remote add <name> url	add remote repository at url (which git hub gives me after creating) typical <name> is origin
git remote -v 		show remote repositories with information
git push <name> <local branch>	push <local branch> to remote repository named <name>

What happens when you initialize a repository? Why do you need to do it?

     File ".git" is created

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     You can choose which file to be tracked with the staging area whereas the reasons
     for a file to be in the working directory are different ones.

How can you use the staging area to make sure you have one commit per logical
change?

	If I start to work on a file put it to staging area and then if I'm not shure see git diff

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	If I want to make a version or try something risky. I can easyly go on with master if this is more probable.

How do the diagrams help you visualize the branch structure?
	you can recognize where you left a branch into another

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It's the result of both paths - everything that one deleted is deleted, everything thas one created
	stays. The graph shows the parallel paths.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	Pro: faster
	Con: Errors might occur.
